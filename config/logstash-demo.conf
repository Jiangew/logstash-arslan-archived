input {
    stdin {
    }
    jdbc {
        # mysql jdbc connection string to our backup databse
        jdbc_connection_string => "jdbc:mysql://127.0.0.1:3306/qq_comment"
        # the user we wish to excute our statement as
        jdbc_user => "root"
        jdbc_password => "root"
        # the path to downloaded jdbc driver
        jdbc_driver_library => "/Users/Jiangew/logstash/mysql-connector/mysql-connector-java-5.1.45-bin.jar"
        # the name of the driver class for mysql
        jdbc_driver_class => "com.mysql.jdbc.Driver"
        jdbc_paging_enabled => true
        jdbc_page_size => 5000
        # statement_filepath => "/Users/Jiangew/logstash/sql/statement.sql"
        statement => "SELECT * FROM qq_comment where createtime > :sql_last_value"
        # minute hour day month year
        schedule => "*/2 * * * *"
        type => "doc"

        # whether to record_last_run result, save to last_run_metadata_path specified file
        record_last_run => true
        # whether to record_last_run result by track column, default track field is timestamp
        use_column_value => true
        # customize track column name we need, the value must be incremental, ex: mysql primary key
        tracking_column => "createtime"
        # track column value saved path
        last_run_metadata_path => "/Users/Jiangew/logstash/config/last_id"
        # whether to clear last_run_metadata_path record, if true then each time is equivalent to all database records from scratch
        # clear_run => false
        # whether to lower the name of the column
        lowercase_column_names => false
    }
}

filter {
    # json {
    #     source => "message"
    #     remove_field => ["message"]
    # }
    # comment table remove fields
    mutate {
        remove_field => ["csid", "title", "content", "supportcount", "weight", "picurls", "videourls", "@version"]
    }
}

output {
    elasticsearch {
        hosts => ["localhost:9200"]
        index => "qq_comment"
        document_id => "%{cid}"
    }
    stdout {
        codec => json_lines
    }
    # stdout {
    #     codec => rubydebug
    # }
}
